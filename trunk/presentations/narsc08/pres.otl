preamble
	@author Charles R. Schmidt$^{1}$\\Sergio J. Rey$^{1}$\\Andr\'e Skupin$^{2}$
	@authorShort Schmidt
	@institute The GeoDa Center for Geospatial Analysis and Computation\\Arizona State University$^{1}$\\Department of Gepgraphy\\San Diego State University$^{2}$
	@instituteShort GeoDa Center
	@title PySOM: A Graph Based Implementation of Self-Organizing Maps
	@titleShort PySOM
	@date November 21, 2008
	@dateShort ASU
	\definecolor{sdsu_green}{RGB}{155,200,115}
	\usecolortheme[named=sdsu_green]{structure}
	\usepackage{graphicx}
	\usepackage{subfigure}
Background
	The Self-Organizing Map
		The Self-Organizing Map
			What is the SOM
			| * Artificial Neural Network
			| * High Dimension Input Data
			| * Unsupervised Competitive Learning Process
			| * Each Neuron Models of a Portion of the Input Space
			Applications
			| * Data Visualization
			| * Data Reduction
			| * Clustering
		In Terms of Geography (Skupin 2004)
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=.8\linewidth]{skupin.png}
			| \end{figure}
			| \end{center}
		SOM as Dimensionality Reduction
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.90\linewidth]{dimensionReduction.png}
			| \end{figure}
			| \end{center}
			| \vspace{1in} (Skupin 2008)
		SOM as Clustering
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.90\linewidth]{clustering.png}
			| \end{figure}
			| \end{center}
			| (Skupin 2008)
		SOM as Clustering
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.90\linewidth]{clustermap.png}
			| \end{figure}
			| \end{center}
			| (Skupin 2008)
		SOM and GIScience
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.50\linewidth]{book.png}
			| \end{figure}
			| \end{center}
		SOM and GIScience
			| \begin{quote}
			| "translate \emph{data similarities} into \emph{spatial relationship}" 
			| \end{quote}
			| \hspace{2in} -- Helge Ritter, 1999
		Training
			Assignment and Updating
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.90\linewidth]{input.png}
			| \end{figure}
			| \end{center}
		Training
			Training
			| * Randomize input vectors
			| * Randomly Initialize the neurons
			| * Loop Until Map Converges
			| ** Grab an Input Vector
			| ** Find the Best Matching Neuron and its Neighborhood
			| ** Modify the Weights of the Neurons to Make them More Similar to the Input Vector
		Training
			Iterations
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.90\linewidth]{somtrain.png}
			| \end{figure}
			| \end{center}
	Edge Effects in SOM
		Edge Effects in SOM
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.60\linewidth]{gridedge.png}
			| \end{figure}
			| \end{center}
		Edge Effects
			In SOM
			| * Higher density of observations mapped to edge neurons
			| * Higher internal heterogeneity for edge neurons
			In Spatial Analysis
			| * Inflated nearest neighbor distances
			| * Mask the true distribution
			Components of Edge Effect
			| * True Boundary
		Suggested Solutions
			With Edges
			| * Hierarchical SOM
			| * Growing SOM
			| * Mathematical Weighting
			Without Edges
			| * Spherical SOM
			| * Toroidal SOM
		Spherical SOM
			Geodesic
			| * Most Common
			| * Highly Regular
			| * Limited Network Size
			Rakhmanov (Spherical)
			| * Rejected in Literature
			| * Less Regular
			| * No Network Size Limitation
PySOM
	Objectives
		PySOM
			Why build another SOM implementation
			| * Alternative topologies not available 
			| * Difficult to extend
			Objectives
			| * Open Source
			| * Support many topologies
			| * Testbed for different topologies
			Design Components
			| * Python
			| * PySAL
			| * Graph Based Implementation
	Design
		Design
			Why Python
			| * Growing scientific community
			| * Extensive libraries
			| * Rapid development
			Python Spatial Analysis Library
			| * Collection of Spatial Analysis Tools
			| * Leveraging PySAL
			| * Extending PySAL
			Graph Based Implementation
			| * Topology independent
			| * Flexible
Results
	Status Report
		Current Status
			Core Library
			| * Training
			| * Mapping
			Interface
			| * Limited API
			| * Python Interpreter
			Topologies
			| * Built in
			| ** Rectangular
			| ** Hexagonal
			| * External
			| ** Rakhmanov (Spherical)
			| ** Geodesic Sphere
		Topologies
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.75\linewidth]{topos.png}
			| \end{figure}
			| \end{center}
		Open Source Project
			Public Repository
			| * Google Project Hosting
			| ** http://code.google.com/p/pysom
			| ** All source is available
			| ** Limited Documentation
	Visualization
		Visualization
			Visualizing the SOM
			| * Currently Handled by ESRI's ArcMap
			| * Limited Assistance
			| ** txt2shp
			| * Result Mapping
			| ** DBF rewrite
		Visualization 
			Rectangular
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.70\linewidth]{rook_clusters.png}
			| \end{figure}
			| \end{center}
		Visualization 
			Hexagonal
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.70\linewidth]{hex_clusters.png}
			| \end{figure}
			| \end{center}
		Visualization 
			Geodesic
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.70\linewidth]{geodesic_clusters.png}
			| \end{figure}
			| \end{center}
		Visualization 
			Spherical
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=0.70\linewidth]{sphere_clusters.png}
			| \end{figure}
			| \end{center}
Conclusions
	Limitations \& Future Directions
		Limitations \& Future Directions
			Limitations
			| * Flexibility over speed
			| ** SOM\_PAK: 90 seconds
			| ** PySOM: 45 minutes
			| * API/Interface
			| * Topology Support
			| * Visualization
		Limitations \& Future Directions
			Extensions
			| * PySAL Style Distribution
			| ** Standalone Desktop Application
			| ** ArcMap Toolbox (Som Analyst)
			| ** Web Services
		Back to Utah and Hawaii
			| \begin{center}
			| \begin{figure}
			| \includegraphics[width=\linewidth]{statesSphere.png}
			| \end{figure}
			| \end{center}
